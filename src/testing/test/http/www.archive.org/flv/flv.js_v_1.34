////////////////////////////////////////////////////////////////////////////////
//Copyright(c)2005-(c)2008 Internet Archive. Software license GPL version 2.


  //////////////////////////////
 ////     OBSOLETED       /////
//////////////////////////////


/*
  !! NOTE !!  We no longer use this file (or the version of flowplayer it uses).

  See "/includes/players.js"
  for the new version of what we are using for all (non-subtitled) movies now.

  This file remains for two reasons:
   1) PLYMedia is still using a customized flowplayer of a certain version
      for subtitle movies
   2) we may have some patrons in the field using this file for displaying
      movies on 3rd party sites
*/
 


///////////////////////////////////////////////////////////////////////////////
// translates the current new way of doing movies to the older way
// we used with globals
///////////////////////////////////////////////////////////////////////////////
var IAPly = {
  
setup:function()
{
  window.onload = function() {
    var bedarg = eval('['+document.getElementById('bedarg').value+']');
    bedarg = bedarg[0];

    var thumbs = '';
    FLVS = '';
    if (bedarg.flvs.length)
    {
      for (var i=0, obj; obj=bedarg.flvs[i]; i++)
        FLVS += "{url:'"+obj.url+"',name:'"+obj.name+"'},";
      for (var i=0, obj; obj=bedarg.thumbs[i]; i++)
        thumbs += obj + " ";
    }

    click2play(bedarg.identifier, bedarg.server, thumbs, 0, bedarg.use_ply);
  };
}
};

IAPly.setup();


////////////////////////////////////////////////////////////////
// older way we used to do movies from here on down...
////////////////////////////////////////////////////////////////

var FLVS = null;
var MP4S = null;

// constants
var CLIK2PLAYWIDTH =        320;
var CONTROLLER_HEIGHT =      23;

// usually constant, but *can* change
var FLASH_WIDTH =           600;
var VIDEO_HEIGHT =          240; // or 480 for h.264s


// why do flash use commas, why?
var MIN_FLASH_VERSION =     "7,0,0";   // the bare minimum -- a C- student
var MP4_FLASH_VERSION =     "9,0,115"; // this one can play h.264-encoded .mp4!


function flowplayer(identifier, fullscreen, mp4count, use_ply)
{
  if (!FLVS  &&  !MP4S)
    return false;

  if (!versionOK(MIN_FLASH_VERSION, 1))
    return false;

  var PLAYLIST = null;
  var NCLIPS = 0;
  if (use_ply)
  {
    // set the playlist to a single (first) file for PLY
    var temp = FLVS.split("url:");
    if (temp.length > 1)
    {
      var temp = temp[1].split("'");
      if (temp.length > 1)
      {
        // NOTE: makes wide movies smaller but OK for now for PLY rollout...
        FLASH_WIDTH = 320;
        PLAYLIST = 'videoFile: \''+temp[1]+'\'';
        NCLIPS = 1;
      }
    }
  }
  else
  {
    if (MP4S  &&  versionOK(MP4_FLASH_VERSION, 0))
    {
      // latest flash plugin that can handle h.264 mp4s!
      
      // there are mp4s!  keep only the mp4s
      PLAYLIST = MP4S;
      NCLIPS = mp4count;
      
      // quadruple the video playsize (double width; double height)
      FLASH_WIDTH = 800;
      VIDEO_HEIGHT = 480;
    }
    else if (FLVS)
    {
      // flash plugin can only handle flash video (and shockwave) clips
      var temp = FLVS.split("url:");
      PLAYLIST = FLVS;
      NCLIPS = temp.length - 1;
    }

    if (PLAYLIST)
      PLAYLIST = 'playList: [ ' + PLAYLIST +' ]';
  }


  if (!PLAYLIST)
  {
    document.getElementById("flowplayerdiv").innerHTML =  'Sorry!  no clips in this item could be played with your flash plugin.';
    return false;
  }
  //console.log(PLAYLIST);
  
  
  // we've detected an acceptable version -- embed Flash Content SWF
  var playerswf = (use_ply ?
                   '/flv/FlowPlayerWhitePly.swf' : '/flv/FlowPlayerWhite.swf');

  document.getElementById("flowplayerdiv").innerHTML = 
    '<object type="application/x-shockwave-flash" '+
    ' height="'+ (VIDEO_HEIGHT + (NCLIPS > 1 ? 110 : CONTROLLER_HEIGHT)) +'"'+
    ' width="'+ FLASH_WIDTH +'"'+
    ' id="FlowPlayer" data="'+playerswf+'">'+
    '<param name="movie" value="'+playerswf+'" />'+
    '<param name="scale" value="noScale" />'+
    '<param name="wmode" value="transparent" />'+
    '<param name="allowScriptAccess" value="sameDomain" />' +
    '<param name="quality" value="high" />'+
    '<param name="flashvars" value="config={'+ 
    '  loop:                 false,  '+
    '  initialScale:         \'fit\','+
    '  showPlayList:         true,   '+
    '  showPlayListButtons:  true,   '+
    '  videoHeight:          '+VIDEO_HEIGHT+','+
    '  noVideoClip: { url: \'/images/notfound.jpg\', duration: 10 },'+
    '  ' + PLAYLIST + ',' +
    ( use_ply ? '' : '  showMenu: false,                ' ) +
    ( use_ply ? '  showPLY: \'true\',              ' : '' ) +
  //'  streamingServer: \'lighttpd\','+
    '}"/>' +
    '</object>';
}



function click2play(identifier, server, thumbs, mp4count, use_ply)
{

  if (navigator.userAgent.indexOf('iPhone') >= 0  ||
      navigator.userAgent.indexOf('iPod'  ) >= 0)
  {
    // the HTTP user agent appears to be an iphone -- don't bother with the
    // flash video and have the click go right to a MPEG4 instead...
    // (... or the agent appears to be an ipod video 8-)
    clik = '<a href="/download/' + identifier + '/format=' +
      (mp4count > 0 ? 512 : 256)+'Kb%20MPEG4">';
  }
  else
  {
    clik =
      '<a href="/about/javascript-required.htm" '+
      ' onClick="flowplayer(\''+identifier+'\', false, '+
      mp4count+','+use_ply+'); return false;">';
  }

  str =
    '<div style="width:'+CLIK2PLAYWIDTH+'; height: 240px; text-align:center; position:relative;">' +
    '<div style="width:'+CLIK2PLAYWIDTH+'; position:absolute; top:0; left:0;">';
  thumbArr = thumbs.split(" ");
  thumbA2 = new Array(null, null, null, null);
  /**/ if (thumbArr.length == 1)
    thumbA2 = new Array(thumbArr[0], null, null, null);
  else if (thumbArr.length == 2)
    thumbA2 = new Array(thumbArr[0], null, null, thumbArr[1]);
  else if (thumbArr.length == 3)
    thumbA2 = new Array(thumbArr[0], thumbArr[1], thumbArr[2], null);
  else if (thumbArr.length >= 4)
    thumbA2 = new Array(thumbArr[0], thumbArr[1], thumbArr[2], thumbArr[3]);
  
        
  // show up to first 4 thumbs, in 2x2 grid
  // add 10px solid black bar on top and bottom of overall grid
  for (i=0; i < 4; i++)
  {
    str +=
      clik +
      '<img alt="click to play movie" title="click to play movie" style="border:0; border'+
      (i < 2 ? '-top' : '-bottom') +
      ':10px solid black; width:160px; height:110px;" ' +
      (thumbA2[i] ?
       'src="http://'+ server + thumbA2[i] + '"/>' :
       'src="/images/movies.gif">') +
      '</a>';
    if (i % 2 == 1)
      str += '<br/>';
  }

  //console.log(str);
  
  str +=
    clik +
    '<img alt="click to play movie" title="click to play movie" style="position:absolute; top:0px; left:0px; height:240px; width:'+CLIK2PLAYWIDTH+'px; z-index:2; border:0px;" src="/images/clicktoplay.png"/></a>';

  
  str += '</div></div>';

  document.getElementById("flowplayerdiv").innerHTML = str;
}





function versionOK(versionStr, writeMessageNotOK)
{
  // Check to see if the version meets the requirements for playback
  var pieces = versionStr.split(",");
  
  var requiredMajorVersion = pieces[0];
  var requiredMinorVersion = pieces[1];
  var requiredRevision     = pieces[2];
  
  // Version check based on Major version+ of Flash required
  var hasReqestedVersion = DetectFlashVer(requiredMajorVersion,
                                          requiredMinorVersion,
                                          requiredRevision);

  if (!hasReqestedVersion)
  {  // flash is too old or we can't detect the plugin
    if (writeMessageNotOK)
    {
      document.getElementById("flowplayerdiv").innerHTML =
        '<div style="padding:10px; border:1px solid brown; background-color:wheat;" class="urge">'
        +'Internet Archive\'s<!--\'--> in-browser video player '
        +(versionStr==MP4_FLASH_VERSION ? ' (now featuring latest h.264 video) ' : '')
        +'requires '
        +'Adobe Flash Player version ' + versionStr + ' or higher. '
        +'It appears that you do not have it installed.<br/>'
        +'<a href="http://www.adobe.com/go/getflash/">Get current Flash version</a></div>';
    }
    return false;
  }

  return true;
}




//Copyright(c)2005-(c)2008 Internet Archive. Software license GPL version 2.
////////////////////////////////////////////////////////////////////////////////




// Flash Player Version Detection - Rev 1.5
// Detect Client Browser type
// Copyright(c) 2005-2006 Adobe Macromedia Software, LLC. All rights reserved.
var isIE  = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
var isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
var isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;

function ControlVersion()
{
	var version;
	var axo;
	var e;

	// NOTE : new ActiveXObject(strFoo) throws an exception if strFoo isn't in the registry

	try {
		// version will be set for 7.X or greater players
		axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
		version = axo.GetVariable("$version");
	} catch (e) {
        }

        
        
	if (!version)
	{
		try {
			// version will be set for 6.X players only
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
			
			// installed player is some revision of 6.0
			// GetVariable("$version") crashes for versions 6.0.22 through 6.0.29,
			// so we have to be careful. 
			
			// default to the first public version
			version = "WIN 6,0,21,0";

			// throws if AllowScripAccess does not exist (introduced in 6.0r47)		
			axo.AllowScriptAccess = "always";

			// safe to call for 6.0r47 or greater
			version = axo.GetVariable("$version");

		} catch (e) {
		}
	}

	if (!version)
	{
		try {
			// version will be set for 4.X or 5.X player
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
			version = axo.GetVariable("$version");
		} catch (e) {
		}
	}

	if (!version)
	{
		try {
			// version will be set for 3.X player
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
			version = "WIN 3,0,18,0";
		} catch (e) {
		}
	}

	if (!version)
	{
		try {
			// version will be set for 2.X player
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
			version = "WIN 2,0,0,11";
		} catch (e) {
			version = -1;
		}
	}
	
	return version;
}

// JavaScript helper required to detect Flash Player PlugIn version information
function GetSwfVer(){
	// NS/Opera version >= 3 check for Flash plugin in plugin array
	var flashVer = -1;
	
	if (navigator.plugins != null && navigator.plugins.length > 0) {
		if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) {
			var swVer2 = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" : "";
			var flashDescription = navigator.plugins["Shockwave Flash" + swVer2].description;			
			var descArray = flashDescription.split(" ");
			var tempArrayMajor = descArray[2].split(".");
			var versionMajor = tempArrayMajor[0];
			var versionMinor = tempArrayMajor[1];
			if ( descArray[3] != "" ) {
				tempArrayMinor = descArray[3].split("r");
			} else {
				tempArrayMinor = descArray[4].split("r");
			}
			var versionRevision = tempArrayMinor[1] > 0 ? tempArrayMinor[1] : 0;
			var flashVer = versionMajor + "." + versionMinor + "." + versionRevision;
		}
	}
	// MSN/WebTV 2.6 supports Flash 4
	else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") != -1) flashVer = 4;
	// WebTV 2.5 supports Flash 3
	else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") != -1) flashVer = 3;
	// older WebTV supports Flash 2
	else if (navigator.userAgent.toLowerCase().indexOf("webtv") != -1) flashVer = 2;
	else if ( isIE && isWin && !isOpera ) {
		flashVer = ControlVersion();
	}	
        
	return flashVer;
}

// When called with reqMajorVer, reqMinorVer, reqRevision returns true if that version or greater is available
function DetectFlashVer(reqMajorVer, reqMinorVer, reqRevision)
{
	versionStr = GetSwfVer();
        //alert(versionStr);
        
        
	if (versionStr == -1 ) {
		return false;
	} else if (versionStr != 0) {
		if(isIE && isWin && !isOpera) {
			// Given "WIN 2,0,0,11"
			tempArray         = versionStr.split(" "); 	// ["WIN", "2,0,0,11"]
			tempString        = tempArray[1];			// "2,0,0,11"
			versionArray      = tempString.split(",");	// ['2', '0', '0', '11']
		} else {
			versionArray      = versionStr.split(".");
		}
		var versionMajor      = versionArray[0];
		var versionMinor      = versionArray[1];
		var versionRevision   = versionArray[2];

        	// is the major.revision >= requested major.revision AND the minor version >= requested minor
		if (versionMajor > parseFloat(reqMajorVer)) {
			return true;
		} else if (versionMajor == parseFloat(reqMajorVer)) {
			if (versionMinor > parseFloat(reqMinorVer))
				return true;
			else if (versionMinor == parseFloat(reqMinorVer)) {
				if (versionRevision >= parseFloat(reqRevision))
					return true;
			}
		}
		return false;
	}
}

function AC_AddExtension(src, ext)
{
  if (src.indexOf('?') != -1)
    return src.replace(/\?/, ext+'?'); 
  else
    return src + ext;
}

function AC_Generateobj(objAttrs, params, embedAttrs) 
{ 
    var str = '';
    if (isIE && isWin && !isOpera)
    {
  		str += '<object ';
  		for (var i in objAttrs)
  			str += i + '="' + objAttrs[i] + '" ';
  		for (var i in params)
  			str += '><param name="' + i + '" value="' + params[i] + '" /> ';
  		str += '></object>';
    } else {
  		str += '<embed ';
  		for (var i in embedAttrs)
  			str += i + '="' + embedAttrs[i] + '" ';
  		str += '> </embed>';
    }

    document.write(str);
}

function AC_FL_RunContent(){
  var ret = 
    AC_GetArgs
    (  arguments, ".swf", "movie", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
     , "application/x-shockwave-flash"
    );
  AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_GetArgs(args, ext, srcParamName, classid, mimeType){
  var ret = new Object();
  ret.embedAttrs = new Object();
  ret.params = new Object();
  ret.objAttrs = new Object();
  for (var i=0; i < args.length; i=i+2){
    var currArg = args[i].toLowerCase();    

    switch (currArg){	
      case "classid":
        break;
      case "pluginspage":
        ret.embedAttrs[args[i]] = args[i+1];
        break;
      case "src":
      case "movie":	
        args[i+1] = AC_AddExtension(args[i+1], ext);
        ret.embedAttrs["src"] = args[i+1];
        ret.params[srcParamName] = args[i+1];
        break;
      case "onafterupdate":
      case "onbeforeupdate":
      case "onblur":
      case "oncellchange":
      case "onclick":
      case "ondblClick":
      case "ondrag":
      case "ondragend":
      case "ondragenter":
      case "ondragleave":
      case "ondragover":
      case "ondrop":
      case "onfinish":
      case "onfocus":
      case "onhelp":
      case "onmousedown":
      case "onmouseup":
      case "onmouseover":
      case "onmousemove":
      case "onmouseout":
      case "onkeypress":
      case "onkeydown":
      case "onkeyup":
      case "onload":
      case "onlosecapture":
      case "onpropertychange":
      case "onreadystatechange":
      case "onrowsdelete":
      case "onrowenter":
      case "onrowexit":
      case "onrowsinserted":
      case "onstart":
      case "onscroll":
      case "onbeforeeditfocus":
      case "onactivate":
      case "onbeforedeactivate":
      case "ondeactivate":
      case "type":
      case "codebase":
      case "id":
        ret.objAttrs[args[i]] = args[i+1];
        break;
      case "width":
      case "height":
      case "align":
      case "vspace": 
      case "hspace":
      case "class":
      case "title":
      case "accesskey":
      case "name":
      case "tabindex":
        ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
        break;
      default:
        ret.embedAttrs[args[i]] = ret.params[args[i]] = args[i+1];
    }
  }
  ret.objAttrs["classid"] = classid;
  if (mimeType) ret.embedAttrs["type"] = mimeType;
  return ret;
}


